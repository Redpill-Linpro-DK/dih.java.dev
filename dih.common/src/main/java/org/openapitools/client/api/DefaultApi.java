/*
 * Inventory Update API
 * API to update inventory quantities. This specification includes a POST interface for updating inventory items.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import dk.rdpl.dih.common.ApiCallback;
import dk.rdpl.dih.common.ApiClient;
import dk.rdpl.dih.common.ApiException;
import dk.rdpl.dih.common.ApiResponse;
import dk.rdpl.dih.common.Configuration;
import dk.rdpl.dih.common.Pair;
import dk.rdpl.dih.common.ProgressRequestBody;
import dk.rdpl.dih.common.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import dk.rdpl.dih.common.model.InventoryItems;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for inventoryUpdatePost
     * @param inventoryItems  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inventory updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inventoryUpdatePostCall(InventoryItems inventoryItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inventoryItems;

        // create path and map variables
        String localVarPath = "/inventory/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inventoryUpdatePostValidateBeforeCall(InventoryItems inventoryItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inventoryItems' is set
        if (inventoryItems == null) {
            throw new ApiException("Missing the required parameter 'inventoryItems' when calling inventoryUpdatePost(Async)");
        }

        return inventoryUpdatePostCall(inventoryItems, _callback);

    }

    /**
     * Update inventory
     * POST interface to update the inventory.  ### Example POST request body &#x60;&#x60;&#x60;json {   \&quot;Inventory\&quot;: [     {       \&quot;ProductID\&quot;: \&quot;P123\&quot;,       \&quot;WarehouseID\&quot;: \&quot;W456\&quot;,       \&quot;Quantity\&quot;: {\&quot;Count\&quot;: 100, \&quot;Measure\&quot;: \&quot;items\&quot;}     },     {       \&quot;ProductID\&quot;: \&quot;P789\&quot;,       \&quot;WarehouseID\&quot;: \&quot;W101\&quot;,       \&quot;Quantity\&quot;: {\&quot;Count\&quot;: 50, \&quot;Measure\&quot;: \&quot;kg\&quot;}     }   ] } &#x60;&#x60;&#x60; 
     * @param inventoryItems  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inventory updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public void inventoryUpdatePost(InventoryItems inventoryItems) throws ApiException {
        inventoryUpdatePostWithHttpInfo(inventoryItems);
    }

    /**
     * Update inventory
     * POST interface to update the inventory.  ### Example POST request body &#x60;&#x60;&#x60;json {   \&quot;Inventory\&quot;: [     {       \&quot;ProductID\&quot;: \&quot;P123\&quot;,       \&quot;WarehouseID\&quot;: \&quot;W456\&quot;,       \&quot;Quantity\&quot;: {\&quot;Count\&quot;: 100, \&quot;Measure\&quot;: \&quot;items\&quot;}     },     {       \&quot;ProductID\&quot;: \&quot;P789\&quot;,       \&quot;WarehouseID\&quot;: \&quot;W101\&quot;,       \&quot;Quantity\&quot;: {\&quot;Count\&quot;: 50, \&quot;Measure\&quot;: \&quot;kg\&quot;}     }   ] } &#x60;&#x60;&#x60; 
     * @param inventoryItems  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inventory updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> inventoryUpdatePostWithHttpInfo(InventoryItems inventoryItems) throws ApiException {
        okhttp3.Call localVarCall = inventoryUpdatePostValidateBeforeCall(inventoryItems, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update inventory (asynchronously)
     * POST interface to update the inventory.  ### Example POST request body &#x60;&#x60;&#x60;json {   \&quot;Inventory\&quot;: [     {       \&quot;ProductID\&quot;: \&quot;P123\&quot;,       \&quot;WarehouseID\&quot;: \&quot;W456\&quot;,       \&quot;Quantity\&quot;: {\&quot;Count\&quot;: 100, \&quot;Measure\&quot;: \&quot;items\&quot;}     },     {       \&quot;ProductID\&quot;: \&quot;P789\&quot;,       \&quot;WarehouseID\&quot;: \&quot;W101\&quot;,       \&quot;Quantity\&quot;: {\&quot;Count\&quot;: 50, \&quot;Measure\&quot;: \&quot;kg\&quot;}     }   ] } &#x60;&#x60;&#x60; 
     * @param inventoryItems  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inventory updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inventoryUpdatePostAsync(InventoryItems inventoryItems, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = inventoryUpdatePostValidateBeforeCall(inventoryItems, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
